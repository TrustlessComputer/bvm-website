/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "@/contract/interfaces/common";

export interface BridgeInterface extends utils.Interface {
  functions: {
    'ETH_TOKEN()': FunctionFragment;
    'bridgeToken(address,uint256,string,uint256)': FunctionFragment;
    'bridgeToken(string,uint256)': FunctionFragment;
    'burnableToken(address)': FunctionFragment;
    'initialize(address,address,address[])': FunctionFragment;
    'mint(address[],address[],uint256[])': FunctionFragment;
    'mint(address,address[],uint256[])': FunctionFragment;
    'operator()': FunctionFragment;
    'owner()': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'transferOperator(address)': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'updateToken(address[],bool[])': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'ETH_TOKEN'
      | 'bridgeToken(address,uint256,string,uint256)'
      | 'bridgeToken(string,uint256)'
      | 'burnableToken'
      | 'initialize'
      | 'mint(address[],address[],uint256[])'
      | 'mint(address,address[],uint256[])'
      | 'operator'
      | 'owner'
      | 'renounceOwnership'
      | 'transferOperator'
      | 'transferOwnership'
      | 'updateToken',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'ETH_TOKEN', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'bridgeToken(address,uint256,string,uint256)',
    values: [string, BigNumberish, string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'bridgeToken(string,uint256)',
    values: [string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'burnableToken',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'initialize',
    values: [string, string, string[]],
  ): string;
  encodeFunctionData(
    functionFragment: 'mint(address[],address[],uint256[])',
    values: [string[], string[], BigNumberish[]],
  ): string;
  encodeFunctionData(
    functionFragment: 'mint(address,address[],uint256[])',
    values: [string, string[], BigNumberish[]],
  ): string;
  encodeFunctionData(functionFragment: 'operator', values?: undefined): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'renounceOwnership',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'transferOperator',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'transferOwnership',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'updateToken',
    values: [string[], boolean[]],
  ): string;

  decodeFunctionResult(functionFragment: 'ETH_TOKEN', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'bridgeToken(address,uint256,string,uint256)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'bridgeToken(string,uint256)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'burnableToken',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'mint(address[],address[],uint256[])',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'mint(address,address[],uint256[])',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'operator', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'renounceOwnership',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'transferOperator',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'transferOwnership',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'updateToken',
    data: BytesLike,
  ): Result;

  events: {
    'BridgeToken(address,address,uint256,string,uint256)': EventFragment;
    'Initialized(uint8)': EventFragment;
    'Mint(address[],address[],uint256[])': EventFragment;
    'Mint(address,address[],uint256[])': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'BridgeToken'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Initialized'): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: 'Mint(address[],address[],uint256[])',
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: 'Mint(address,address[],uint256[])',
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
}

export interface BridgeTokenEventObject {
  token: string;
  burner: string;
  amount: BigNumber;
  extddr: string;
  destChainId: BigNumber;
}
export type BridgeTokenEvent = TypedEvent<
  [string, string, BigNumber, string, BigNumber],
  BridgeTokenEventObject
>;

export type BridgeTokenEventFilter = TypedEventFilter<BridgeTokenEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface Mint_address_array_address_array_uint256_array_EventObject {
  tokens: string[];
  recipients: string[];
  amounts: BigNumber[];
}
export type Mint_address_array_address_array_uint256_array_Event = TypedEvent<
  [string[], string[], BigNumber[]],
  Mint_address_array_address_array_uint256_array_EventObject
>;

export type Mint_address_array_address_array_uint256_array_EventFilter =
  TypedEventFilter<Mint_address_array_address_array_uint256_array_Event>;

export interface Mint_address_address_array_uint256_array_EventObject {
  token: string;
  recipients: string[];
  amounts: BigNumber[];
}
export type Mint_address_address_array_uint256_array_Event = TypedEvent<
  [string, string[], BigNumber[]],
  Mint_address_address_array_uint256_array_EventObject
>;

export type Mint_address_address_array_uint256_array_EventFilter =
  TypedEventFilter<Mint_address_address_array_uint256_array_Event>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface Bridge extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BridgeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ETH_TOKEN(overrides?: CallOverrides): Promise<[string]>;

    'bridgeToken(address,uint256,string,uint256)'(
      token: string,
      amount: BigNumberish,
      externalAddr: string,
      destChainId: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    'bridgeToken(string,uint256)'(
      externalAddr: string,
      destChainId: BigNumberish,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<ContractTransaction>;

    burnableToken(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    initialize(
      safeMultisigContractAddress: string,
      operator_: string,
      tokens: string[],
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    'mint(address[],address[],uint256[])'(
      tokens: string[],
      recipients: string[],
      amounts: BigNumberish[],
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    'mint(address,address[],uint256[])'(
      token: string,
      recipients: string[],
      amounts: BigNumberish[],
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    operator(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    transferOperator(
      operator_: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    updateToken(
      tokens: string[],
      isBurns: boolean[],
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;
  };

  ETH_TOKEN(overrides?: CallOverrides): Promise<string>;

  'bridgeToken(address,uint256,string,uint256)'(
    token: string,
    amount: BigNumberish,
    externalAddr: string,
    destChainId: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  'bridgeToken(string,uint256)'(
    externalAddr: string,
    destChainId: BigNumberish,
    overrides?: PayableOverrides & { from?: string },
  ): Promise<ContractTransaction>;

  burnableToken(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  initialize(
    safeMultisigContractAddress: string,
    operator_: string,
    tokens: string[],
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  'mint(address[],address[],uint256[])'(
    tokens: string[],
    recipients: string[],
    amounts: BigNumberish[],
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  'mint(address,address[],uint256[])'(
    token: string,
    recipients: string[],
    amounts: BigNumberish[],
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  operator(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  transferOperator(
    operator_: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  updateToken(
    tokens: string[],
    isBurns: boolean[],
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  callStatic: {
    ETH_TOKEN(overrides?: CallOverrides): Promise<string>;

    'bridgeToken(address,uint256,string,uint256)'(
      token: string,
      amount: BigNumberish,
      externalAddr: string,
      destChainId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    'bridgeToken(string,uint256)'(
      externalAddr: string,
      destChainId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    burnableToken(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    initialize(
      safeMultisigContractAddress: string,
      operator_: string,
      tokens: string[],
      overrides?: CallOverrides,
    ): Promise<void>;

    'mint(address[],address[],uint256[])'(
      tokens: string[],
      recipients: string[],
      amounts: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<void>;

    'mint(address,address[],uint256[])'(
      token: string,
      recipients: string[],
      amounts: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<void>;

    operator(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOperator(
      operator_: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    updateToken(
      tokens: string[],
      isBurns: boolean[],
      overrides?: CallOverrides,
    ): Promise<void>;
  };

  filters: {
    'BridgeToken(address,address,uint256,string,uint256)'(
      token?: null,
      burner?: null,
      amount?: null,
      extddr?: null,
      destChainId?: null,
    ): BridgeTokenEventFilter;
    BridgeToken(
      token?: null,
      burner?: null,
      amount?: null,
      extddr?: null,
      destChainId?: null,
    ): BridgeTokenEventFilter;

    'Initialized(uint8)'(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    'Mint(address[],address[],uint256[])'(
      tokens?: null,
      recipients?: null,
      amounts?: null,
    ): Mint_address_array_address_array_uint256_array_EventFilter;
    'Mint(address,address[],uint256[])'(
      token?: null,
      recipients?: null,
      amounts?: null,
    ): Mint_address_address_array_uint256_array_EventFilter;

    'OwnershipTransferred(address,address)'(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    ETH_TOKEN(overrides?: CallOverrides): Promise<BigNumber>;

    'bridgeToken(address,uint256,string,uint256)'(
      token: string,
      amount: BigNumberish,
      externalAddr: string,
      destChainId: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    'bridgeToken(string,uint256)'(
      externalAddr: string,
      destChainId: BigNumberish,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<BigNumber>;

    burnableToken(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      safeMultisigContractAddress: string,
      operator_: string,
      tokens: string[],
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    'mint(address[],address[],uint256[])'(
      tokens: string[],
      recipients: string[],
      amounts: BigNumberish[],
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    'mint(address,address[],uint256[])'(
      token: string,
      recipients: string[],
      amounts: BigNumberish[],
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    operator(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    transferOperator(
      operator_: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    updateToken(
      tokens: string[],
      isBurns: boolean[],
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ETH_TOKEN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'bridgeToken(address,uint256,string,uint256)'(
      token: string,
      amount: BigNumberish,
      externalAddr: string,
      destChainId: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'bridgeToken(string,uint256)'(
      externalAddr: string,
      destChainId: BigNumberish,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    burnableToken(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    initialize(
      safeMultisigContractAddress: string,
      operator_: string,
      tokens: string[],
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'mint(address[],address[],uint256[])'(
      tokens: string[],
      recipients: string[],
      amounts: BigNumberish[],
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'mint(address,address[],uint256[])'(
      token: string,
      recipients: string[],
      amounts: BigNumberish[],
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    operator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    transferOperator(
      operator_: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    updateToken(
      tokens: string[],
      isBurns: boolean[],
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;
  };
}
