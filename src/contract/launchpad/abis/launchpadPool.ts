/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from '../../interfaces/common';

export type LaunchpadPoolInitParamsStruct = {
  creator: string;
  paymentTokens: string[];
  saleTokenBalance: BigNumberish;
  liquidityTokenBalance: BigNumberish;
  airdropTokenBalance: BigNumberish;
  airdropAddress: string;
  liquidityFundRatio: BigNumberish;
  hardCapUSD: BigNumberish;
  duration: BigNumberish;
};

export type LaunchpadPoolInitParamsStructOutput = [
  string,
  string[],
  BigNumber,
  BigNumber,
  BigNumber,
  string,
  BigNumber,
  BigNumber,
  BigNumber,
] & {
  creator: string;
  paymentTokens: string[];
  saleTokenBalance: BigNumber;
  liquidityTokenBalance: BigNumber;
  airdropTokenBalance: BigNumber;
  airdropAddress: string;
  liquidityFundRatio: BigNumber;
  hardCapUSD: BigNumber;
  duration: BigNumber;
};

export interface LaunchpadPoolInterface extends utils.Interface {
  functions: {
    'blockTimestamp()': FunctionFragment;
    'claim(address)': FunctionFragment;
    'deposit(address,uint256)': FunctionFragment;
    'end()': FunctionFragment;
    'fundingBalanceOf(address)': FunctionFragment;
    'fundingTotals()': FunctionFragment;
    'getChainId()': FunctionFragment;
    'getNftPosistionId()': FunctionFragment;
    'getTokenPrice(address)': FunctionFragment;
    'initialize((address,address[],uint128,uint128,uint128,address,uint256,uint256,uint256))': FunctionFragment;
    'multicall(bytes[])': FunctionFragment;
    'owner()': FunctionFragment;
    'releaseFund(address,uint256)': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'start(address)': FunctionFragment;
    'tge()': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'updateBoost(address,uint256)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'blockTimestamp'
      | 'claim'
      | 'deposit'
      | 'end'
      | 'fundingBalanceOf'
      | 'fundingTotals'
      | 'getChainId'
      | 'getNftPosistionId'
      | 'getTokenPrice'
      | 'initialize'
      | 'multicall'
      | 'owner'
      | 'releaseFund'
      | 'renounceOwnership'
      | 'start'
      | 'tge'
      | 'transferOwnership'
      | 'updateBoost',
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'blockTimestamp',
    values?: undefined,
  ): string;
  encodeFunctionData(functionFragment: 'claim', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'deposit',
    values: [string, BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: 'end', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'fundingBalanceOf',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'fundingTotals',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'getChainId',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'getNftPosistionId',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'getTokenPrice',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'initialize',
    values: [LaunchpadPoolInitParamsStruct],
  ): string;
  encodeFunctionData(
    functionFragment: 'multicall',
    values: [BytesLike[]],
  ): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'releaseFund',
    values: [string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'renounceOwnership',
    values?: undefined,
  ): string;
  encodeFunctionData(functionFragment: 'start', values: [string]): string;
  encodeFunctionData(functionFragment: 'tge', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'transferOwnership',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'updateBoost',
    values: [string, BigNumberish],
  ): string;

  decodeFunctionResult(
    functionFragment: 'blockTimestamp',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'claim', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'end', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'fundingBalanceOf',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'fundingTotals',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'getChainId', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'getNftPosistionId',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getTokenPrice',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'multicall', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'releaseFund',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'renounceOwnership',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'start', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'tge', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'transferOwnership',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'updateBoost',
    data: BytesLike,
  ): Result;

  events: {
    'BalanceUpdated(address,address,uint256,uint256)': EventFragment;
    'BoostUpdated(address,uint256)': EventFragment;
    'Claimed(address,uint256)': EventFragment;
    'Deposited(address,address,uint256,uint256,uint256,uint256)': EventFragment;
    'End()': EventFragment;
    'FundReleased(address,uint256)': EventFragment;
    'Initialized(uint8)': EventFragment;
    'LiqidityAdd(uint256,address,address,uint256,uint256)': EventFragment;
    'LiqiditySwap(address,address,uint256,uint256)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'Start(address,uint256,uint256)': EventFragment;
    'Tge()': EventFragment;
    'TokenRefund(address,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'BalanceUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'BoostUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Claimed'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Deposited'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'End'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'FundReleased'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Initialized'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LiqidityAdd'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LiqiditySwap'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Start'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Tge'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'TokenRefund'): EventFragment;
}

export interface BalanceUpdatedEventObject {
  user: string;
  token: string;
  balance: BigNumber;
  balanceBoost: BigNumber;
}
export type BalanceUpdatedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  BalanceUpdatedEventObject
>;

export type BalanceUpdatedEventFilter = TypedEventFilter<BalanceUpdatedEvent>;

export interface BoostUpdatedEventObject {
  user: string;
  boostRatio: BigNumber;
}
export type BoostUpdatedEvent = TypedEvent<
  [string, BigNumber],
  BoostUpdatedEventObject
>;

export type BoostUpdatedEventFilter = TypedEventFilter<BoostUpdatedEvent>;

export interface ClaimedEventObject {
  user: string;
  amount: BigNumber;
}
export type ClaimedEvent = TypedEvent<[string, BigNumber], ClaimedEventObject>;

export type ClaimedEventFilter = TypedEventFilter<ClaimedEvent>;

export interface DepositedEventObject {
  user: string;
  token: string;
  amount: BigNumber;
  amountBoost: BigNumber;
  balance: BigNumber;
  balanceBoost: BigNumber;
}
export type DepositedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber, BigNumber],
  DepositedEventObject
>;

export type DepositedEventFilter = TypedEventFilter<DepositedEvent>;

export interface EndEventObject {}
export type EndEvent = TypedEvent<[], EndEventObject>;

export type EndEventFilter = TypedEventFilter<EndEvent>;

export interface FundReleasedEventObject {
  token: string;
  amount: BigNumber;
}
export type FundReleasedEvent = TypedEvent<
  [string, BigNumber],
  FundReleasedEventObject
>;

export type FundReleasedEventFilter = TypedEventFilter<FundReleasedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface LiqidityAddEventObject {
  nftPositionId: BigNumber;
  token0: string;
  token1: string;
  amount0: BigNumber;
  amoun1: BigNumber;
}
export type LiqidityAddEvent = TypedEvent<
  [BigNumber, string, string, BigNumber, BigNumber],
  LiqidityAddEventObject
>;

export type LiqidityAddEventFilter = TypedEventFilter<LiqidityAddEvent>;

export interface LiqiditySwapEventObject {
  token0: string;
  token1: string;
  amount0: BigNumber;
  amoun1: BigNumber;
}
export type LiqiditySwapEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  LiqiditySwapEventObject
>;

export type LiqiditySwapEventFilter = TypedEventFilter<LiqiditySwapEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface StartEventObject {
  saleToken: string;
  start: BigNumber;
  duration: BigNumber;
}
export type StartEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  StartEventObject
>;

export type StartEventFilter = TypedEventFilter<StartEvent>;

export interface TgeEventObject {}
export type TgeEvent = TypedEvent<[], TgeEventObject>;

export type TgeEventFilter = TypedEventFilter<TgeEvent>;

export interface TokenRefundEventObject {
  token: string;
  amount: BigNumber;
}
export type TokenRefundEvent = TypedEvent<
  [string, BigNumber],
  TokenRefundEventObject
>;

export type TokenRefundEventFilter = TypedEventFilter<TokenRefundEvent>;

export interface LaunchpadPool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LaunchpadPoolInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    blockTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    claim(
      user: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    deposit(
      token: string,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<ContractTransaction>;

    end(
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    fundingBalanceOf(
      user: string,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, string[], BigNumber[], BigNumber[]] & {
        balanceUSD: BigNumber;
        balanceBoostUSD: BigNumber;
        balanceToken: BigNumber;
        paymentTokens: string[];
        balances: BigNumber[];
        balanceBoosts: BigNumber[];
      }
    >;

    fundingTotals(overrides?: CallOverrides): Promise<
      [
        BigNumber,
        BigNumber,
        string[],
        BigNumber[],
        BigNumber[],
        number,
        BigNumber,
      ] & {
        totalUSD: BigNumber;
        totalBoostUSD: BigNumber;
        paymentTokens: string[];
        totals: BigNumber[];
        totalBoosts: BigNumber[];
        status: number;
        endTime: BigNumber;
      }
    >;

    getChainId(
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { chainId: BigNumber }>;

    getNftPosistionId(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTokenPrice(
      token: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    initialize(
      params: LaunchpadPoolInitParamsStruct,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    multicall(
      data: BytesLike[],
      overrides?: PayableOverrides & { from?: string },
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    releaseFund(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    start(
      saleToken: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    tge(
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    updateBoost(
      user: string,
      boostRatio: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;
  };

  blockTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  claim(
    user: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  deposit(
    token: string,
    amount: BigNumberish,
    overrides?: PayableOverrides & { from?: string },
  ): Promise<ContractTransaction>;

  end(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;

  fundingBalanceOf(
    user: string,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber, BigNumber, string[], BigNumber[], BigNumber[]] & {
      balanceUSD: BigNumber;
      balanceBoostUSD: BigNumber;
      balanceToken: BigNumber;
      paymentTokens: string[];
      balances: BigNumber[];
      balanceBoosts: BigNumber[];
    }
  >;

  fundingTotals(overrides?: CallOverrides): Promise<
    [
      BigNumber,
      BigNumber,
      string[],
      BigNumber[],
      BigNumber[],
      number,
      BigNumber,
    ] & {
      totalUSD: BigNumber;
      totalBoostUSD: BigNumber;
      paymentTokens: string[];
      totals: BigNumber[];
      totalBoosts: BigNumber[];
      status: number;
      endTime: BigNumber;
    }
  >;

  getChainId(overrides?: CallOverrides): Promise<BigNumber>;

  getNftPosistionId(overrides?: CallOverrides): Promise<BigNumber>;

  getTokenPrice(token: string, overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    params: LaunchpadPoolInitParamsStruct,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  multicall(
    data: BytesLike[],
    overrides?: PayableOverrides & { from?: string },
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  releaseFund(
    token: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  start(
    saleToken: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  tge(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  updateBoost(
    user: string,
    boostRatio: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  callStatic: {
    blockTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    claim(user: string, overrides?: CallOverrides): Promise<void>;

    deposit(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    end(overrides?: CallOverrides): Promise<void>;

    fundingBalanceOf(
      user: string,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, string[], BigNumber[], BigNumber[]] & {
        balanceUSD: BigNumber;
        balanceBoostUSD: BigNumber;
        balanceToken: BigNumber;
        paymentTokens: string[];
        balances: BigNumber[];
        balanceBoosts: BigNumber[];
      }
    >;

    fundingTotals(overrides?: CallOverrides): Promise<
      [
        BigNumber,
        BigNumber,
        string[],
        BigNumber[],
        BigNumber[],
        number,
        BigNumber,
      ] & {
        totalUSD: BigNumber;
        totalBoostUSD: BigNumber;
        paymentTokens: string[];
        totals: BigNumber[];
        totalBoosts: BigNumber[];
        status: number;
        endTime: BigNumber;
      }
    >;

    getChainId(overrides?: CallOverrides): Promise<BigNumber>;

    getNftPosistionId(overrides?: CallOverrides): Promise<BigNumber>;

    getTokenPrice(token: string, overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      params: LaunchpadPoolInitParamsStruct,
      overrides?: CallOverrides,
    ): Promise<void>;

    multicall(data: BytesLike[], overrides?: CallOverrides): Promise<string[]>;

    owner(overrides?: CallOverrides): Promise<string>;

    releaseFund(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    start(saleToken: string, overrides?: CallOverrides): Promise<void>;

    tge(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    updateBoost(
      user: string,
      boostRatio: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;
  };

  filters: {
    'BalanceUpdated(address,address,uint256,uint256)'(
      user?: string | null,
      token?: string | null,
      balance?: null,
      balanceBoost?: null,
    ): BalanceUpdatedEventFilter;
    BalanceUpdated(
      user?: string | null,
      token?: string | null,
      balance?: null,
      balanceBoost?: null,
    ): BalanceUpdatedEventFilter;

    'BoostUpdated(address,uint256)'(
      user?: string | null,
      boostRatio?: null,
    ): BoostUpdatedEventFilter;
    BoostUpdated(
      user?: string | null,
      boostRatio?: null,
    ): BoostUpdatedEventFilter;

    'Claimed(address,uint256)'(
      user?: string | null,
      amount?: null,
    ): ClaimedEventFilter;
    Claimed(user?: string | null, amount?: null): ClaimedEventFilter;

    'Deposited(address,address,uint256,uint256,uint256,uint256)'(
      user?: string | null,
      token?: string | null,
      amount?: null,
      amountBoost?: null,
      balance?: null,
      balanceBoost?: null,
    ): DepositedEventFilter;
    Deposited(
      user?: string | null,
      token?: string | null,
      amount?: null,
      amountBoost?: null,
      balance?: null,
      balanceBoost?: null,
    ): DepositedEventFilter;

    'End()'(): EndEventFilter;
    End(): EndEventFilter;

    'FundReleased(address,uint256)'(
      token?: string | null,
      amount?: null,
    ): FundReleasedEventFilter;
    FundReleased(token?: string | null, amount?: null): FundReleasedEventFilter;

    'Initialized(uint8)'(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    'LiqidityAdd(uint256,address,address,uint256,uint256)'(
      nftPositionId?: BigNumberish | null,
      token0?: string | null,
      token1?: string | null,
      amount0?: null,
      amoun1?: null,
    ): LiqidityAddEventFilter;
    LiqidityAdd(
      nftPositionId?: BigNumberish | null,
      token0?: string | null,
      token1?: string | null,
      amount0?: null,
      amoun1?: null,
    ): LiqidityAddEventFilter;

    'LiqiditySwap(address,address,uint256,uint256)'(
      token0?: string | null,
      token1?: string | null,
      amount0?: null,
      amoun1?: null,
    ): LiqiditySwapEventFilter;
    LiqiditySwap(
      token0?: string | null,
      token1?: string | null,
      amount0?: null,
      amoun1?: null,
    ): LiqiditySwapEventFilter;

    'OwnershipTransferred(address,address)'(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): OwnershipTransferredEventFilter;

    'Start(address,uint256,uint256)'(
      saleToken?: null,
      start?: null,
      duration?: null,
    ): StartEventFilter;
    Start(saleToken?: null, start?: null, duration?: null): StartEventFilter;

    'Tge()'(): TgeEventFilter;
    Tge(): TgeEventFilter;

    'TokenRefund(address,uint256)'(
      token?: string | null,
      amount?: null,
    ): TokenRefundEventFilter;
    TokenRefund(token?: string | null, amount?: null): TokenRefundEventFilter;
  };

  estimateGas: {
    blockTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    claim(
      user: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    deposit(
      token: string,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<BigNumber>;

    end(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    fundingBalanceOf(
      user: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    fundingTotals(overrides?: CallOverrides): Promise<BigNumber>;

    getChainId(overrides?: CallOverrides): Promise<BigNumber>;

    getNftPosistionId(overrides?: CallOverrides): Promise<BigNumber>;

    getTokenPrice(token: string, overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      params: LaunchpadPoolInitParamsStruct,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    multicall(
      data: BytesLike[],
      overrides?: PayableOverrides & { from?: string },
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    releaseFund(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    start(
      saleToken: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    tge(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    updateBoost(
      user: string,
      boostRatio: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    blockTimestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claim(
      user: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    deposit(
      token: string,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    end(
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    fundingBalanceOf(
      user: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    fundingTotals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getChainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNftPosistionId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTokenPrice(
      token: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    initialize(
      params: LaunchpadPoolInitParamsStruct,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    multicall(
      data: BytesLike[],
      overrides?: PayableOverrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    releaseFund(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    start(
      saleToken: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    tge(
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    updateBoost(
      user: string,
      boostRatio: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;
  };
}
