/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace ERC20VotesUpgradeable {
  export type CheckpointStruct = {
    fromBlock: BigNumberish;
    votes: BigNumberish;
  };

  export type CheckpointStructOutput = [number, BigNumber] & {
    fromBlock: number;
    votes: BigNumber;
  };
}

export interface STBvmInterface extends utils.Interface {
  functions: {
    "CLOCK_MODE()": FunctionFragment;
    "DOMAIN_SEPARATOR()": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "blockTimestamp()": FunctionFragment;
    "checkpoints(address,uint32)": FunctionFragment;
    "claim(uint256)": FunctionFragment;
    "clock()": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "delegate(address)": FunctionFragment;
    "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "delegates(address)": FunctionFragment;
    "eip712Domain()": FunctionFragment;
    "getBaseRatio()": FunctionFragment;
    "getChainId()": FunctionFragment;
    "getMultiplierPoint(address)": FunctionFragment;
    "getPastTotalSupply(uint256)": FunctionFragment;
    "getPastVotes(address,uint256)": FunctionFragment;
    "getPrincipleBalance(address)": FunctionFragment;
    "getRewards(address)": FunctionFragment;
    "getTeamCaptain(bytes32)": FunctionFragment;
    "getTeamOf(address)": FunctionFragment;
    "getTeamPrincipleBalance(bytes32)": FunctionFragment;
    "getTeamRewardRatios(bytes32)": FunctionFragment;
    "getUserData(address)": FunctionFragment;
    "getVotes(address)": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "initialize(address,string,string,uint256,uint256[],uint256[],uint256[])": FunctionFragment;
    "multicall(bytes[])": FunctionFragment;
    "name()": FunctionFragment;
    "nonces(address)": FunctionFragment;
    "numCheckpoints(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "restake(uint256)": FunctionFragment;
    "revokeBalance(address,uint256,uint256)": FunctionFragment;
    "reward(address)": FunctionFragment;
    "stake(uint256,uint8,bytes32)": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unstake(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "CLOCK_MODE"
      | "DOMAIN_SEPARATOR"
      | "allowance"
      | "approve"
      | "balanceOf"
      | "blockTimestamp"
      | "checkpoints"
      | "claim"
      | "clock"
      | "decimals"
      | "decreaseAllowance"
      | "delegate"
      | "delegateBySig"
      | "delegates"
      | "eip712Domain"
      | "getBaseRatio"
      | "getChainId"
      | "getMultiplierPoint"
      | "getPastTotalSupply"
      | "getPastVotes"
      | "getPrincipleBalance"
      | "getRewards"
      | "getTeamCaptain"
      | "getTeamOf"
      | "getTeamPrincipleBalance"
      | "getTeamRewardRatios"
      | "getUserData"
      | "getVotes"
      | "increaseAllowance"
      | "initialize"
      | "multicall"
      | "name"
      | "nonces"
      | "numCheckpoints"
      | "owner"
      | "permit"
      | "renounceOwnership"
      | "restake"
      | "revokeBalance"
      | "reward"
      | "stake"
      | "symbol"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
      | "transferOwnership"
      | "unstake"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "CLOCK_MODE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "blockTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "checkpoints",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "claim", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "clock", values?: undefined): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "delegate", values: [string]): string;
  encodeFunctionData(
    functionFragment: "delegateBySig",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(functionFragment: "delegates", values: [string]): string;
  encodeFunctionData(
    functionFragment: "eip712Domain",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBaseRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getChainId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMultiplierPoint",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPastTotalSupply",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPastVotes",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPrincipleBalance",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getRewards", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getTeamCaptain",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "getTeamOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getTeamPrincipleBalance",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTeamRewardRatios",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "getUserData", values: [string]): string;
  encodeFunctionData(functionFragment: "getVotes", values: [string]): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      string,
      string,
      string,
      BigNumberish,
      BigNumberish[],
      BigNumberish[],
      BigNumberish[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "multicall",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "nonces", values: [string]): string;
  encodeFunctionData(
    functionFragment: "numCheckpoints",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "permit",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "restake",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeBalance",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "reward", values: [string]): string;
  encodeFunctionData(
    functionFragment: "stake",
    values: [BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unstake",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "CLOCK_MODE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "blockTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkpoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "clock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "delegate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "delegateBySig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "delegates", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "eip712Domain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBaseRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getChainId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMultiplierPoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPastTotalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPastVotes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPrincipleBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRewards", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTeamCaptain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getTeamOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTeamPrincipleBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTeamRewardRatios",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getVotes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "numCheckpoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "permit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "restake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "revokeBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "reward", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unstake", data: BytesLike): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "BaseRatioUpdated(uint256)": EventFragment;
    "Claimed(uint256)": EventFragment;
    "DelegateChanged(address,address,address)": EventFragment;
    "DelegateVotesChanged(address,uint256,uint256)": EventFragment;
    "EIP712DomainChanged()": EventFragment;
    "Initialized(uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Restake(uint256,address,uint256,uint256)": EventFragment;
    "Reward(address,uint256)": EventFragment;
    "Stake(address,uint256,uint256)": EventFragment;
    "TeamCreated(bytes32,address)": EventFragment;
    "TeamStake(bytes32,address,uint256,uint256)": EventFragment;
    "TeamUnstake(bytes32,address,uint256,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "Unstake(uint256,address,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BaseRatioUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Claimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DelegateChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DelegateVotesChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EIP712DomainChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Restake"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Reward"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Stake"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TeamCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TeamStake"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TeamUnstake"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unstake"): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface BaseRatioUpdatedEventObject {
  baseRatio: BigNumber;
}
export type BaseRatioUpdatedEvent = TypedEvent<
  [BigNumber],
  BaseRatioUpdatedEventObject
>;

export type BaseRatioUpdatedEventFilter =
  TypedEventFilter<BaseRatioUpdatedEvent>;

export interface ClaimedEventObject {
  unstakeId: BigNumber;
}
export type ClaimedEvent = TypedEvent<[BigNumber], ClaimedEventObject>;

export type ClaimedEventFilter = TypedEventFilter<ClaimedEvent>;

export interface DelegateChangedEventObject {
  delegator: string;
  fromDelegate: string;
  toDelegate: string;
}
export type DelegateChangedEvent = TypedEvent<
  [string, string, string],
  DelegateChangedEventObject
>;

export type DelegateChangedEventFilter = TypedEventFilter<DelegateChangedEvent>;

export interface DelegateVotesChangedEventObject {
  delegate: string;
  previousBalance: BigNumber;
  newBalance: BigNumber;
}
export type DelegateVotesChangedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  DelegateVotesChangedEventObject
>;

export type DelegateVotesChangedEventFilter =
  TypedEventFilter<DelegateVotesChangedEvent>;

export interface EIP712DomainChangedEventObject {}
export type EIP712DomainChangedEvent = TypedEvent<
  [],
  EIP712DomainChangedEventObject
>;

export type EIP712DomainChangedEventFilter =
  TypedEventFilter<EIP712DomainChangedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface RestakeEventObject {
  unstakeId: BigNumber;
  user: string;
  restakeRewardAmount: BigNumber;
  restakeRewardMultiplierPoint: BigNumber;
}
export type RestakeEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber],
  RestakeEventObject
>;

export type RestakeEventFilter = TypedEventFilter<RestakeEvent>;

export interface RewardEventObject {
  user: string;
  rewardAmount: BigNumber;
}
export type RewardEvent = TypedEvent<[string, BigNumber], RewardEventObject>;

export type RewardEventFilter = TypedEventFilter<RewardEvent>;

export interface StakeEventObject {
  user: string;
  principleAmount: BigNumber;
  principleBalance: BigNumber;
}
export type StakeEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  StakeEventObject
>;

export type StakeEventFilter = TypedEventFilter<StakeEvent>;

export interface TeamCreatedEventObject {
  teamCode: string;
  owner: string;
}
export type TeamCreatedEvent = TypedEvent<
  [string, string],
  TeamCreatedEventObject
>;

export type TeamCreatedEventFilter = TypedEventFilter<TeamCreatedEvent>;

export interface TeamStakeEventObject {
  teamCode: string;
  user: string;
  principleAmount: BigNumber;
  principleBalance: BigNumber;
}
export type TeamStakeEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  TeamStakeEventObject
>;

export type TeamStakeEventFilter = TypedEventFilter<TeamStakeEvent>;

export interface TeamUnstakeEventObject {
  teamCode: string;
  user: string;
  principleAmount: BigNumber;
  principleBalance: BigNumber;
}
export type TeamUnstakeEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  TeamUnstakeEventObject
>;

export type TeamUnstakeEventFilter = TypedEventFilter<TeamUnstakeEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface UnstakeEventObject {
  unstakeId: BigNumber;
  user: string;
  principleAmount: BigNumber;
  principleBalance: BigNumber;
  validAt: BigNumber;
}
export type UnstakeEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber, BigNumber],
  UnstakeEventObject
>;

export type UnstakeEventFilter = TypedEventFilter<UnstakeEvent>;

export interface STBvm extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: STBvmInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    CLOCK_MODE(overrides?: CallOverrides): Promise<[string]>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<[string]>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    blockTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    checkpoints(
      account: string,
      pos: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[ERC20VotesUpgradeable.CheckpointStructOutput]>;

    claim(
      unstakeId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    clock(overrides?: CallOverrides): Promise<[number]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    delegate(
      delegatee: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    delegateBySig(
      delegatee: string,
      nonce: BigNumberish,
      expiry: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    delegates(account: string, overrides?: CallOverrides): Promise<[string]>;

    eip712Domain(
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber, string, string, BigNumber[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: BigNumber;
        verifyingContract: string;
        salt: string;
        extensions: BigNumber[];
      }
    >;

    getBaseRatio(overrides?: CallOverrides): Promise<[BigNumber]>;

    getChainId(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { chainId: BigNumber }>;

    getMultiplierPoint(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPastTotalSupply(
      timepoint: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPastVotes(
      account: string,
      timepoint: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPrincipleBalance(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRewards(
      user: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        rewardAmount: BigNumber;
        multiplierPoint: BigNumber;
      }
    >;

    getTeamCaptain(
      teamCode: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getTeamOf(
      user: string,
      overrides?: CallOverrides
    ): Promise<[string, number] & { teamCode: string; role: number }>;

    getTeamPrincipleBalance(
      teamCode: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTeamRewardRatios(
      teamCode: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        captainRewardRatio: BigNumber;
        memberRewardRatio: BigNumber;
      }
    >;

    getUserData(
      user: string,
      overrides?: CallOverrides
    ): Promise<
      [string, number, BigNumber, BigNumber, BigNumber] & {
        userTeamCode: string;
        teamRole: number;
        principleBalance: BigNumber;
        rewardAmount: BigNumber;
        multiplierPoint: BigNumber;
      }
    >;

    getVotes(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    initialize(
      principleToken: string,
      name: string,
      symbol: string,
      baseRatio: BigNumberish,
      teamAmounts: BigNumberish[],
      captainRatios: BigNumberish[],
      memberRatios: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    multicall(
      data: BytesLike[],
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    nonces(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    numCheckpoints(
      account: string,
      overrides?: CallOverrides
    ): Promise<[number]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    permit(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    restake(
      unstakeId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    revokeBalance(
      user: string,
      unstakeId: BigNumberish,
      principleAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    reward(
      user: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    stake(
      principleAmount: BigNumberish,
      role: BigNumberish,
      teamCode: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    unstake(
      principleAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  CLOCK_MODE(overrides?: CallOverrides): Promise<string>;

  DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  blockTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  checkpoints(
    account: string,
    pos: BigNumberish,
    overrides?: CallOverrides
  ): Promise<ERC20VotesUpgradeable.CheckpointStructOutput>;

  claim(
    unstakeId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  clock(overrides?: CallOverrides): Promise<number>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  delegate(
    delegatee: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  delegateBySig(
    delegatee: string,
    nonce: BigNumberish,
    expiry: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  delegates(account: string, overrides?: CallOverrides): Promise<string>;

  eip712Domain(
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, BigNumber, string, string, BigNumber[]] & {
      fields: string;
      name: string;
      version: string;
      chainId: BigNumber;
      verifyingContract: string;
      salt: string;
      extensions: BigNumber[];
    }
  >;

  getBaseRatio(overrides?: CallOverrides): Promise<BigNumber>;

  getChainId(overrides?: CallOverrides): Promise<BigNumber>;

  getMultiplierPoint(
    user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPastTotalSupply(
    timepoint: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPastVotes(
    account: string,
    timepoint: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPrincipleBalance(
    user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRewards(
    user: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      rewardAmount: BigNumber;
      multiplierPoint: BigNumber;
    }
  >;

  getTeamCaptain(
    teamCode: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  getTeamOf(
    user: string,
    overrides?: CallOverrides
  ): Promise<[string, number] & { teamCode: string; role: number }>;

  getTeamPrincipleBalance(
    teamCode: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTeamRewardRatios(
    teamCode: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      captainRewardRatio: BigNumber;
      memberRewardRatio: BigNumber;
    }
  >;

  getUserData(
    user: string,
    overrides?: CallOverrides
  ): Promise<
    [string, number, BigNumber, BigNumber, BigNumber] & {
      userTeamCode: string;
      teamRole: number;
      principleBalance: BigNumber;
      rewardAmount: BigNumber;
      multiplierPoint: BigNumber;
    }
  >;

  getVotes(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  initialize(
    principleToken: string,
    name: string,
    symbol: string,
    baseRatio: BigNumberish,
    teamAmounts: BigNumberish[],
    captainRatios: BigNumberish[],
    memberRatios: BigNumberish[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  multicall(
    data: BytesLike[],
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  nonces(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  numCheckpoints(account: string, overrides?: CallOverrides): Promise<number>;

  owner(overrides?: CallOverrides): Promise<string>;

  permit(
    owner: string,
    spender: string,
    value: BigNumberish,
    deadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  restake(
    unstakeId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  revokeBalance(
    user: string,
    unstakeId: BigNumberish,
    principleAmount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  reward(
    user: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  stake(
    principleAmount: BigNumberish,
    role: BigNumberish,
    teamCode: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferFrom(
    from: string,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  unstake(
    principleAmount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    CLOCK_MODE(overrides?: CallOverrides): Promise<string>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    blockTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    checkpoints(
      account: string,
      pos: BigNumberish,
      overrides?: CallOverrides
    ): Promise<ERC20VotesUpgradeable.CheckpointStructOutput>;

    claim(unstakeId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    clock(overrides?: CallOverrides): Promise<number>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    delegate(delegatee: string, overrides?: CallOverrides): Promise<void>;

    delegateBySig(
      delegatee: string,
      nonce: BigNumberish,
      expiry: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    delegates(account: string, overrides?: CallOverrides): Promise<string>;

    eip712Domain(
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber, string, string, BigNumber[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: BigNumber;
        verifyingContract: string;
        salt: string;
        extensions: BigNumber[];
      }
    >;

    getBaseRatio(overrides?: CallOverrides): Promise<BigNumber>;

    getChainId(overrides?: CallOverrides): Promise<BigNumber>;

    getMultiplierPoint(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPastTotalSupply(
      timepoint: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPastVotes(
      account: string,
      timepoint: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPrincipleBalance(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRewards(
      user: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        rewardAmount: BigNumber;
        multiplierPoint: BigNumber;
      }
    >;

    getTeamCaptain(
      teamCode: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getTeamOf(
      user: string,
      overrides?: CallOverrides
    ): Promise<[string, number] & { teamCode: string; role: number }>;

    getTeamPrincipleBalance(
      teamCode: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTeamRewardRatios(
      teamCode: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        captainRewardRatio: BigNumber;
        memberRewardRatio: BigNumber;
      }
    >;

    getUserData(
      user: string,
      overrides?: CallOverrides
    ): Promise<
      [string, number, BigNumber, BigNumber, BigNumber] & {
        userTeamCode: string;
        teamRole: number;
        principleBalance: BigNumber;
        rewardAmount: BigNumber;
        multiplierPoint: BigNumber;
      }
    >;

    getVotes(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      principleToken: string,
      name: string,
      symbol: string,
      baseRatio: BigNumberish,
      teamAmounts: BigNumberish[],
      captainRatios: BigNumberish[],
      memberRatios: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    multicall(data: BytesLike[], overrides?: CallOverrides): Promise<string[]>;

    name(overrides?: CallOverrides): Promise<string>;

    nonces(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    numCheckpoints(account: string, overrides?: CallOverrides): Promise<number>;

    owner(overrides?: CallOverrides): Promise<string>;

    permit(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    restake(unstakeId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    revokeBalance(
      user: string,
      unstakeId: BigNumberish,
      principleAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    reward(user: string, overrides?: CallOverrides): Promise<void>;

    stake(
      principleAmount: BigNumberish,
      role: BigNumberish,
      teamCode: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unstake(
      principleAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;

    "BaseRatioUpdated(uint256)"(baseRatio?: null): BaseRatioUpdatedEventFilter;
    BaseRatioUpdated(baseRatio?: null): BaseRatioUpdatedEventFilter;

    "Claimed(uint256)"(unstakeId?: BigNumberish | null): ClaimedEventFilter;
    Claimed(unstakeId?: BigNumberish | null): ClaimedEventFilter;

    "DelegateChanged(address,address,address)"(
      delegator?: string | null,
      fromDelegate?: string | null,
      toDelegate?: string | null
    ): DelegateChangedEventFilter;
    DelegateChanged(
      delegator?: string | null,
      fromDelegate?: string | null,
      toDelegate?: string | null
    ): DelegateChangedEventFilter;

    "DelegateVotesChanged(address,uint256,uint256)"(
      delegate?: string | null,
      previousBalance?: null,
      newBalance?: null
    ): DelegateVotesChangedEventFilter;
    DelegateVotesChanged(
      delegate?: string | null,
      previousBalance?: null,
      newBalance?: null
    ): DelegateVotesChangedEventFilter;

    "EIP712DomainChanged()"(): EIP712DomainChangedEventFilter;
    EIP712DomainChanged(): EIP712DomainChangedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Restake(uint256,address,uint256,uint256)"(
      unstakeId?: BigNumberish | null,
      user?: string | null,
      restakeRewardAmount?: null,
      restakeRewardMultiplierPoint?: null
    ): RestakeEventFilter;
    Restake(
      unstakeId?: BigNumberish | null,
      user?: string | null,
      restakeRewardAmount?: null,
      restakeRewardMultiplierPoint?: null
    ): RestakeEventFilter;

    "Reward(address,uint256)"(
      user?: string | null,
      rewardAmount?: null
    ): RewardEventFilter;
    Reward(user?: string | null, rewardAmount?: null): RewardEventFilter;

    "Stake(address,uint256,uint256)"(
      user?: string | null,
      principleAmount?: null,
      principleBalance?: null
    ): StakeEventFilter;
    Stake(
      user?: string | null,
      principleAmount?: null,
      principleBalance?: null
    ): StakeEventFilter;

    "TeamCreated(bytes32,address)"(
      teamCode?: BytesLike | null,
      owner?: string | null
    ): TeamCreatedEventFilter;
    TeamCreated(
      teamCode?: BytesLike | null,
      owner?: string | null
    ): TeamCreatedEventFilter;

    "TeamStake(bytes32,address,uint256,uint256)"(
      teamCode?: BytesLike | null,
      user?: string | null,
      principleAmount?: null,
      principleBalance?: null
    ): TeamStakeEventFilter;
    TeamStake(
      teamCode?: BytesLike | null,
      user?: string | null,
      principleAmount?: null,
      principleBalance?: null
    ): TeamStakeEventFilter;

    "TeamUnstake(bytes32,address,uint256,uint256)"(
      teamCode?: BytesLike | null,
      user?: string | null,
      principleAmount?: null,
      principleBalance?: null
    ): TeamUnstakeEventFilter;
    TeamUnstake(
      teamCode?: BytesLike | null,
      user?: string | null,
      principleAmount?: null,
      principleBalance?: null
    ): TeamUnstakeEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;

    "Unstake(uint256,address,uint256,uint256,uint256)"(
      unstakeId?: BigNumberish | null,
      user?: string | null,
      principleAmount?: null,
      principleBalance?: null,
      validAt?: null
    ): UnstakeEventFilter;
    Unstake(
      unstakeId?: BigNumberish | null,
      user?: string | null,
      principleAmount?: null,
      principleBalance?: null,
      validAt?: null
    ): UnstakeEventFilter;
  };

  estimateGas: {
    CLOCK_MODE(overrides?: CallOverrides): Promise<BigNumber>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    blockTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    checkpoints(
      account: string,
      pos: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claim(
      unstakeId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    clock(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    delegate(
      delegatee: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    delegateBySig(
      delegatee: string,
      nonce: BigNumberish,
      expiry: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    delegates(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    eip712Domain(overrides?: CallOverrides): Promise<BigNumber>;

    getBaseRatio(overrides?: CallOverrides): Promise<BigNumber>;

    getChainId(overrides?: CallOverrides): Promise<BigNumber>;

    getMultiplierPoint(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPastTotalSupply(
      timepoint: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPastVotes(
      account: string,
      timepoint: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPrincipleBalance(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRewards(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    getTeamCaptain(
      teamCode: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTeamOf(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    getTeamPrincipleBalance(
      teamCode: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTeamRewardRatios(
      teamCode: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserData(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    getVotes(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    initialize(
      principleToken: string,
      name: string,
      symbol: string,
      baseRatio: BigNumberish,
      teamAmounts: BigNumberish[],
      captainRatios: BigNumberish[],
      memberRatios: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    multicall(
      data: BytesLike[],
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    nonces(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    numCheckpoints(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    permit(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    restake(
      unstakeId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    revokeBalance(
      user: string,
      unstakeId: BigNumberish,
      principleAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    reward(
      user: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    stake(
      principleAmount: BigNumberish,
      role: BigNumberish,
      teamCode: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    unstake(
      principleAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    CLOCK_MODE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    blockTimestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    checkpoints(
      account: string,
      pos: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claim(
      unstakeId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    clock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    delegate(
      delegatee: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    delegateBySig(
      delegatee: string,
      nonce: BigNumberish,
      expiry: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    delegates(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    eip712Domain(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBaseRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getChainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMultiplierPoint(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPastTotalSupply(
      timepoint: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPastVotes(
      account: string,
      timepoint: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPrincipleBalance(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRewards(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTeamCaptain(
      teamCode: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTeamOf(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTeamPrincipleBalance(
      teamCode: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTeamRewardRatios(
      teamCode: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserData(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVotes(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    initialize(
      principleToken: string,
      name: string,
      symbol: string,
      baseRatio: BigNumberish,
      teamAmounts: BigNumberish[],
      captainRatios: BigNumberish[],
      memberRatios: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    multicall(
      data: BytesLike[],
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nonces(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    numCheckpoints(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    permit(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    restake(
      unstakeId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    revokeBalance(
      user: string,
      unstakeId: BigNumberish,
      principleAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    reward(
      user: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    stake(
      principleAmount: BigNumberish,
      role: BigNumberish,
      teamCode: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    unstake(
      principleAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
