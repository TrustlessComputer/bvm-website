import {
  DALayerEnum,
  RollupEnum,
  ServiceTypeEnum,
} from '@/modules/blockchains/Buy/Buy.constanst';
import {
  IPlugin,
  IQuickStart,
  OrderItemResp,
  OrderStatus,
  QuickStartTypeEnum,
} from '@/stores/states/l2services/types';

const FinalizationPeriod = 604800 + ''; // 7 days

export const getBridgeLink = (isProduction: boolean, networkName: string) => {
  return isProduction
    ? `${networkName}.trustlessbridge.io`
    : `https://testnet.trustlessbridge.io/bridge/${networkName}`;
};

export const CHAIN_ID = {
  NOS: 42213,
  NOS_TEST: 42070,
  TRUSTLESS_COMPUTER: 22213,
  TRUSTLESS_COMPUTER_TEST: 22215,
  NAKA_CHAIN_MAINNET: 42225,
  RUNE_CHAIN_MAINNET: 43337,
  ETERNAL_AI_CHAIN_MAINNET: 43338,
};

const getPlugins = ({
  isProduction,
  networkName,
}: {
  isProduction: boolean;
  networkName: string;
}): Array<IPlugin> => {
  const plugins = [
    {
      name: 'Trustless Bridge',
      description:
        'A two-way bridge that enables seamless transfer of assets between Bitcoin and Trustless Computer.',
      image: 'https://cdn.trustless.domains/icons/ic-bridge.svg',
      link: getBridgeLink(isProduction, networkName),
    },
  ];

  return [...plugins];
};

const TRUSTLESS_COMPUTER_MAINNET: OrderItemResp = {
  orderId: '1',
  index: 0,
  isConstant: true,
  createAt: '1679624226',
  tcAddress: '',
  serviceType: RollupEnum.Rollup_OpStack,
  serviceFee: '0',
  setupCost: '0',
  instanceId: '1',
  reward: '0',
  isWithdrawableReward: false,
  domain: 'TC',
  chainId: CHAIN_ID.TRUSTLESS_COMPUTER + '',
  chainName: 'Trustless Computer',
  description: '',
  finalizationPeriod: '',
  blockTime: '600',
  isMainnet: true,
  evmVersion: '',
  minGasPrice: '',
  dataAvaibilityChain: DALayerEnum.DALayer_BTC,
  monitorLink: '',
  needToTopupBalance: '0',
  nextBillingAt: '',
  status: OrderStatus.Started,
  l2BridgeContract: '',
  l2PortalContract: '',
  explorer: 'https://explorer.trustless.computer/',
  rpc: 'https://tc-node.trustless.computer/',
  rollupCost: '0',
  userName: 'NBC team',
  ticker: 'BTC',
  plugins: getPlugins({
    isProduction: true,
    networkName: 'trustless-computer',
  }),
  bridgeStatus: 1,
};

const TRUSTLESS_COMPUTER_TESTNET: OrderItemResp = {
  createAt: '1677896226',
  orderId: '3',
  index: 0,
  isConstant: true,
  tcAddress: '',
  serviceType: RollupEnum.Rollup_OpStack,
  serviceFee: '0',
  setupCost: '0',
  instanceId: '3',
  reward: '0',
  isWithdrawableReward: false,
  domain: 'TC (Testnet)',
  chainId: CHAIN_ID.TRUSTLESS_COMPUTER_TEST + '',
  chainName: 'BVM (Testnet)',
  description: '',
  finalizationPeriod: '',
  blockTime: '600',
  isMainnet: false,
  evmVersion: '',
  minGasPrice: '',
  dataAvaibilityChain: DALayerEnum.DALayer_BTC,
  monitorLink: '',
  needToTopupBalance: '0',
  nextBillingAt: '',
  status: OrderStatus.Started,
  l2BridgeContract: '',
  l2PortalContract: '',
  explorer: 'https://explorer.regtest.trustless.computer/',
  rpc: 'https://tc-node-manual.regtest.trustless.computer',
  rollupCost: '0',
  userName: 'NBC team',
  ticker: 'BTC',
  plugins: getPlugins({
    isProduction: false,
    networkName: 'trustless-computer',
  }),
  bridgeStatus: 1,
};

// ALPHA (NOS old) MAINNET
const ALPHA_MAINNET: OrderItemResp = {
  createAt: '1687832226',
  index: 1,
  isConstant: true,
  orderId: '2',
  tcAddress: '',
  serviceType: RollupEnum.Rollup_OpStack,
  serviceFee: '0',
  setupCost: '0',
  instanceId: '1',
  reward: '0',
  isWithdrawableReward: false,
  domain: `NOS`,
  chainId: CHAIN_ID.NOS + '',
  chainName: `Alpha Chain`,
  description: '',
  finalizationPeriod: FinalizationPeriod,
  blockTime: '2',
  isMainnet: true,
  evmVersion: '',
  minGasPrice: '',
  dataAvaibilityChain: DALayerEnum.DALayer_PLG,
  monitorLink: '',
  needToTopupBalance: '0',
  nextBillingAt: '',
  status: OrderStatus.Started,
  l2BridgeContract: '',
  l2PortalContract: '',
  explorer: 'https://explorer.l2.trustless.computer/',
  rpc: 'https://node.l2.trustless.computer/',
  rollupCost: '0',
  userName: 'NBC team',
  ticker: 'BVM',
  plugins: getPlugins({
    isProduction: true,
    networkName: 'trustlessLayer2',
  }),
  bridgeStatus: 1,
};

// ALPHA (NOS old) TESTNET
const ALPHA_TESTNET: OrderItemResp = {
  createAt: '1685240226',
  index: 1,
  isConstant: true,
  orderId: '4',
  tcAddress: '',
  serviceType: RollupEnum.Rollup_OpStack,
  serviceFee: '0',
  setupCost: '0',
  instanceId: '3',
  reward: '0',
  isWithdrawableReward: false,
  domain: 'NOS (Testnet)',
  chainId: CHAIN_ID.NOS_TEST + '',
  chainName: 'NOS (Testnet)',
  description: '',
  finalizationPeriod: FinalizationPeriod,
  blockTime: '2',
  isMainnet: false,
  evmVersion: '',
  minGasPrice: '',
  dataAvaibilityChain: DALayerEnum.DALayer_PLG,
  monitorLink: '',
  needToTopupBalance: '0',
  nextBillingAt: '',
  status: OrderStatus.Started,
  l2BridgeContract: '',
  l2PortalContract: '',
  explorer: 'https://nos-explorer.regtest.trustless.computer/',
  rpc: 'https://l2-node.regtest.trustless.computer/',
  rollupCost: '0',
  userName: 'NBC team',
  ticker: 'BVM',
  plugins: getPlugins({
    isProduction: false,
    networkName: 'trustlessLayer2',
  }),
  bridgeStatus: 1,
};

const NAKA_TESTNET: OrderItemResp = {
  createAt: '1704067200',
  index: 4,
  isConstant: true,
  orderId: '4',
  tcAddress: '',
  serviceType: RollupEnum.Rollup_OpStack,
  serviceFee: '0',
  setupCost: '0',
  instanceId: '4',
  reward: '0',
  isWithdrawableReward: false,
  domain: 'Naka (Testnet)',
  chainId: CHAIN_ID.NOS_TEST + '',
  chainName: 'Naka (Testnet)',
  description: '',
  finalizationPeriod: FinalizationPeriod,
  blockTime: '2',
  isMainnet: false,
  evmVersion: '',
  minGasPrice: '',
  dataAvaibilityChain: DALayerEnum.DALayer_PLG,
  monitorLink: '',
  needToTopupBalance: '0',
  nextBillingAt: '',
  status: OrderStatus.Started,
  l2BridgeContract: '',
  l2PortalContract: '',
  explorer: 'https://nos-explorer.regtest.trustless.computer/',
  rpc: 'https://l2-node.regtest.trustless.computer/',
  rollupCost: '0',
  userName: 'Naka team',
  ticker: 'BTC',
  plugins: getPlugins({
    isProduction: false,
    networkName: '',
  }),
  bridgeStatus: 1,
};

// NAKA Mainnet
const NAKA_MAINNET: OrderItemResp = {
  // Naka mainnet
  createAt: '1704067200',
  index: 2,
  isConstant: true,
  orderId: '5',
  tcAddress: '',
  serviceType: RollupEnum.Rollup_OpStack,
  serviceFee: '0',
  setupCost: '0',
  instanceId: '1',
  reward: '0',
  isWithdrawableReward: false,
  domain: `Naka`,
  chainId: CHAIN_ID.NAKA_CHAIN_MAINNET + '',
  chainName: `Naka Chain`,
  description: '',
  finalizationPeriod: FinalizationPeriod,
  blockTime: '2',
  isMainnet: true,
  evmVersion: '',
  minGasPrice: '',
  dataAvaibilityChain: DALayerEnum.DALayer_PLG,
  monitorLink: '',
  needToTopupBalance: '0',
  nextBillingAt: '',
  status: OrderStatus.Started,
  l2BridgeContract: '',
  l2PortalContract: '',
  explorer: 'https://explorer.nakachain.xyz/',
  rpc: 'https://node.nakachain.xyz/',
  rollupCost: '0',
  userName: 'Naka team',
  ticker: 'BTC',
  plugins: getPlugins({
    isProduction: true,
    networkName: '',
  }),
  bridgeStatus: 1,
};

// Runechain Mainnet
const RUNECHAIN_MAINNET: OrderItemResp = {
  createAt: '1713609082',
  index: 3,
  isConstant: true,
  orderId: '6',
  tcAddress: '',
  serviceType: RollupEnum.Rollup_OpStack,
  serviceFee: '0',
  setupCost: '0',
  instanceId: '3',
  reward: '0',
  isWithdrawableReward: false,
  domain: `RuneChain`,
  chainId: CHAIN_ID.RUNE_CHAIN_MAINNET + '',
  chainName: `RuneChain`,
  description: '',
  finalizationPeriod: FinalizationPeriod,
  blockTime: '2',
  isMainnet: true,
  evmVersion: '',
  minGasPrice: '',
  dataAvaibilityChain: DALayerEnum.DALayer_PLG,
  monitorLink: '',
  needToTopupBalance: '0',
  nextBillingAt: '',
  status: OrderStatus.Started,
  l2BridgeContract: '',
  l2PortalContract: '',
  explorer: 'https://explorer.nakachain.xyz/',
  rpc: 'https://node.runechain.com/',
  rollupCost: '0',
  userName: 'RuneChain team',
  ticker: 'BVM',
  plugins: getPlugins({
    isProduction: true,
    networkName: '',
  }),
  bridgeStatus: 1,
};

// Eternal AI Mainnet
const ETERNAL_AI_MAINNET: OrderItemResp = {
  createAt: '1715958000',
  index: 6,
  isConstant: true,
  orderId: '7',
  tcAddress: '',
  serviceType: RollupEnum.Rollup_OpStack,
  serviceFee: '0',
  setupCost: '0',
  instanceId: '',
  reward: '0',
  isWithdrawableReward: false,
  domain: `EternalAI`,
  chainId: CHAIN_ID.ETERNAL_AI_CHAIN_MAINNET + '',
  chainName: `EternalAI`,
  description: '',
  finalizationPeriod: FinalizationPeriod,
  blockTime: '2',
  isMainnet: true,
  evmVersion: '',
  minGasPrice: '',
  dataAvaibilityChain: DALayerEnum.DALayer_Celestia,
  monitorLink: '',
  needToTopupBalance: '0',
  nextBillingAt: '',
  status: OrderStatus.Started,
  l2BridgeContract: '',
  l2PortalContract: '',
  explorer: 'https://explorer.eternalai.org',
  rpc: 'https://node.eternalai.org',
  rollupCost: '0',
  userName: 'EternalAI team',
  ticker: 'EAI',
  plugins: getPlugins({
    isProduction: true,
    networkName: '',
  }),
  bridgeStatus: 1,
};

const L2_MAINNET = [
  TRUSTLESS_COMPUTER_MAINNET,
  ALPHA_MAINNET,
  NAKA_MAINNET,
  RUNECHAIN_MAINNET,
  ETERNAL_AI_MAINNET,
];
const L2_TESTNET = [TRUSTLESS_COMPUTER_TESTNET, ALPHA_TESTNET, NAKA_TESTNET];

const COMPUTERS: Array<OrderItemResp> = [...L2_MAINNET, ...L2_TESTNET];

const QUICK_START: Array<IQuickStart> = [
  {
    title: 'Build your ZK Powered Blockchain',
    completed: true,
    type: QuickStartTypeEnum.CREATE,
  },
  {
    title: 'Get some testnet BVM',
    completed: false,
    type: QuickStartTypeEnum.FAUCET,
  },
  {
    title: 'Issue your gov token',
    completed: false,
    type: QuickStartTypeEnum.ISSUE_TOKEN,
  },
  {
    title: 'Set up your crowdfund campaign',
    completed: false,
    type: QuickStartTypeEnum.CROWD_FUNDING,
  },
  {
    title: 'Set up your DAO',
    completed: false,
    type: QuickStartTypeEnum.DAO,
  },
  {
    title: 'Tweet about your Bitcoin L2',
    completed: false,
    type: QuickStartTypeEnum.TWITTER,
  },
  {
    title: 'Join Discord',
    completed: false,
    type: QuickStartTypeEnum.JOIN_DISCORD,
  },
];

export { COMPUTERS, QUICK_START };
